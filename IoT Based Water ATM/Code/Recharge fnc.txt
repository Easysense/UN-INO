

void recharge_fnc()
{
  lcd_print(0, 0, "SCAN CARD_");
  lcd_print(12, 3, "F2: EXIT");
  card_volume = read_card_volume();
  unsigned int scan_range = card_volume + 1;
  read_RFID();

  if (rfid_read_ok == 1)
  {
    lcd_print(18, 0, "R1");
    if (scan_range < 1)
    {
      lcd_print(0, 1, "No registration!");
      beep();
      dly(2000); lcd.clear(); dly(100);
    }
    else
    {
      byte history = 0;
      for (unsigned int i = 0; i < scan_range; i++)
      {
        int n;
        unsigned int adrs;
        adrs = tag_address_initial + i * 12;
        n = 0;
        clear_oldTag();
        read_oldTag(adrs);
        compare_with_oldTag();
        //if found any match....
        // do something;
        if (total > 0)
        {
          lcd.clear(); dly(100);
          lcd_print(0, 0, "CARD ID#");
          lcd.setCursor(8, 0);
          lcd.print(i);
          lcd_print(0, 1, "STATUS_");
          history = 1;
          unsigned int balance = 0;
          unsigned int new_balance = 0;
          balance = balance_check(i);
          dly(2000);
          lcd.clear(); dly(100);
          if (balance >= 60000)
          {
            lcd_print(0, 0, "No need!   ");
            lcd_print(0, 1, "Use & Try later   ");
            beep(); beep();
            dly(2000);
            rfid_read_ok = 0;//reset read ok mask
            clean_newTag();
            operation_mode = 0;
            lcd.clear(); dly(100);
            goto end_exit;
          }
point1:
          lcd_print(0, 0, "SELECT_");
          lcd_print(0, 1, "1.50TK");
          lcd_print(0, 2, "2.100TK");
          lcd_print(0, 3, "3.150TK");
          lcd_print(10, 1, "4.200TK");
          lcd_print(10, 2, "5.250TK");
          lcd_print(10, 3, "6.300TK");
          dly(10);
          key_value = 0;//clear key_value
          exit_from_fnc();
          if (key_value == '1' || key_value == '2' || key_value == '3' || key_value == '4' || key_value == '5' || key_value == '6')
          {
            lcd.clear(); dly(100);
            goto point2;
          }
          else if (key_value == '#')
          {
            lcd.clear(); dly(100);

            goto end_exit;
          }
          else
          {
            goto point1;
          }

point2:
          lcd_print(0, 0, "CONFIRM:");
          byte error = 0;
          if (key_value == '1')
          {
            if (balance <= 55000)
            {
              lcd_print(8, 0, "  50TK ?");
              new_balance = 5000;
            }
            else
            {
              lcd_print(8, 0, "  Err!  ");
              lcd_print(0, 1, "Use & Try Later");
              new_balance = 0;
              dly(2000);
              new_balance = 0;
              operation_mode = 0;//return to main mode
              clean_newTag();
              rfid_read_ok = 0;//reset read ok mask
              lcd.clear(); dly(100);
              goto end_exit;
            }
          }
          else if (key_value == '2')
          {
            if (balance <= 50000)
            {
              lcd_print(8, 0, "  100TK ?");
              new_balance = 10000;
            }
            else
            {
              lcd_print(8, 0, "  Err!  ");
              lcd_print(0, 1, "Try low value <50TK");
              new_balance = 0;
              error = 1;
            }
          }
          else if (key_value == '3')
          {
            if (balance <= 45000)
            {
              lcd_print(8, 0, "  150TK ?");
              new_balance = 15000;
            }
            else
            {
              lcd_print(8, 0, "  Err!  ");
              lcd_print(0, 1, "Try low value <100TK");
              new_balance = 0;
              error = 1;
            }
          }
          else if (key_value == '4')
          {
            if (balance <= 40000)
            {
              lcd_print(8, 0, "  200TK ?");
              new_balance = 20000;
            }
            else
            {
              lcd_print(8, 0, "  Err!  ");
              lcd_print(0, 1, "Try low value <150TK");
              new_balance = 0;
              error = 1;
            }
          }
          else if (key_value == '5')
          {
            if (balance <= 35000)
            {
              lcd_print(8, 0, "  250TK ?");
              new_balance = 25000;
            }
            else
            {
              lcd_print(8, 0, "  Err!  ");
              lcd_print(0, 1, "Try low value <200TK");
              new_balance = 0;
              error = 1;
            }
          }
          else if (key_value == '6')
          {
            if (balance <= 20000)
            {
              lcd_print(8, 0, "  300TK ?");
              new_balance = 30000;
            }
            else
            {
              lcd_print(8, 0, "  Err!  ");
              lcd_print(0, 1, "Try low value <250TK");
              new_balance = 0;
              error = 1;
            }
          }

          lcd_print(0, 3, "F2:Exit    OFF:AGAIN");

          if (error != 1)lcd_print(0, 2, "F1: YES");
          else         lcd_print(0, 2, "       ");
          exit_from_fnc();

          if (key_value == '#')
          {
            new_balance = 0;
            operation_mode = 0;//return to main mode
            clean_newTag();
            rfid_read_ok = 0;//reset read ok mask
            goto end_exit;
          }

          if (key_value == '*')
          {
            lcd.clear(); dly(100);
            lcd_print(0, 0, "RECHARGE COMPLETE!");
            dly(1000); beep(); beep();
            lcd.clear(); dly(100);
             
          }
          else if (key_value == 'D')//try again
          {
            lcd.clear(); dly(100);
            new_balance = 0;
            goto point1;
          }
          else
          {
            dly(10);
            goto point2;
          }

extre: 
          int n = 0;
          unsigned int adrs_balance = balance_address_initial + i * 6;
          unsigned int new_digit_balance[6] = {0, 0, 0, 0, 0, 0};

          unsigned long blc = individual_balance_check(i);
          //          Serial.print("Indv_bal:");
          //          Serial.print(blc);
          //          Serial.println();
          //
          //          Serial.print("new_bal:");
          //          Serial.print(new_balance);
          //          Serial.println();

          balance +=  (long)new_balance ;

          //          Serial.print("total_bal:");
          //          Serial.print(balance);
          //          Serial.println();


          long blnc = balance;
          for (int k = 5; k > 0; k--)
          {
            if (blnc >= 0)new_digit_balance[k] = blnc % 10;
            else new_digit_balance[k] = 0;
            blnc /= 10;
          }

          n = 0;
          for (unsigned int k = adrs_balance; k < adrs_balance + 6; k++) //store saved tag into oldTag
          {
            writeEEPROM(eeprom1, k, new_digit_balance[n]);
            //            Serial.print("bal_digits: "); Serial.print(n); Serial.print(" - ");
            //            Serial.println(new_digit_balance[n]);
            n++; dly(1);
          }

          //          Serial.println();
          //          long blc2 = individual_balance_check(i);
          //          Serial.print("updated bal:");
          //          Serial.print(blc2);
          //          Serial.println();

          //last recharge amount:
          unsigned int adrs_last_recharge = last_recharge_amount_address_initial + i * 6;
          int last_recharge[] = {0, 0, 0, 0, 0, 0};
          long last_recharge_amount = 0;
          long last_recharge_balane = (long)new_balance / 100; //store in TK value

          long value1 = (long)last_recharge_balane;
          for (int k = 5; k > 0; k--)
          {
            if (value1 >= 0)last_recharge[k] = value1 % 10;
            else last_recharge[k] = 0;
            value1 /= 10;
          }

          n = 0;
          for (unsigned int k = adrs_last_recharge; k < adrs_last_recharge + 6; k++)//store saved tag into oldTag
          {
            writeEEPROM(eeprom1, k, last_recharge[n]);//store tag
            n++; dly(1);
          }

          //read last recharge amount from EEPROM
          last_recharge_amount = (long) find_last_recharge_amount(i);

          //          Serial.println();
          //          Serial.print("ID's last_recharge_amount =");
          //          Serial.print(last_recharge_amount);
          //          Serial.print("TK");
          //          Serial.println();

          write_today_recharge_amount(last_recharge_amount);

          //save total recharge amount
          unsigned int adrs_total_recharge = total_recharge_amount_address_initial + i * 6;
          int total_recharge[] = {0, 0, 0, 0, 0, 0};
          unsigned long total_recharge_amount = (long)find_total_recharge_amount(i);
          total_recharge_amount += (long) last_recharge_amount;

          long value2 = (long)total_recharge_amount;
          for (int k = 5; k > 0; k--)
          {
            if (value2 >= 0)total_recharge[k] = value2 % 10;
            else total_recharge[k] = 0;
            value2 /= 10;
          }

          n = 0;
          for (unsigned int k = adrs_total_recharge; k < adrs_total_recharge + 6; k++)//store saved tag into oldTag
          {
            writeEEPROM(eeprom1, k, total_recharge[n]);//store tag
            n++; dly(1);
          }
          //read the data again
          total_recharge_amount = (long)find_total_recharge_amount(i);

          //          Serial.println();
          //          Serial.print("total_recharge_amount =");
          //          Serial.print(total_recharge_amount);
          //          Serial.println();

          lcd_print(0, 0, "NEW BALANCE_");
          lcd_print(0, 1, "ID#");
          lcd.setCursor(3, 1);
          lcd.print(i);
          n = 0;
          unsigned int digit_balance[6];
          for (unsigned int k = adrs_balance; k < adrs_balance + 6; k++)//store saved tag into oldTag
          {
            digit_balance[n] = readEEPROM(eeprom1, k);//read old tag
            n++; dly(1);
          }
          balance = digit_balance[0] * 100000
                    + digit_balance[1] * 10000
                    + digit_balance[2] * 1000
                    + digit_balance[3] * 100
                    + digit_balance[4] * 10
                    + digit_balance[5];
          balance = balance_check(i);
          balance = digit_balance[0] * 100000
                    + digit_balance[1] * 10000
                    + digit_balance[2] * 1000
                    + digit_balance[3] * 100
                    + digit_balance[4] * 10
                    + digit_balance[5];
          dly(3000);
          lcd.clear(); dly(100);


          enable_user_recharge_data_posting();
          write_recharging_id_no(i);
          int post_status = readEEPROM(eeprom1, 96);//check if posting was successfull or not
          if (post_status == 1)
          {
            int device_id = readEEPROM(eeprom1, 90);
            Send_data_over_net_user_recharge_data(device_id, i, find_last_recharge_amount(i), find_total_recharge_amount(i));
            user_recharge_data_posting_done();
            beep();
            lcd.clear(); dly(100);
          }

          rfid_read_ok = 0;//reset read ok mask
          clean_newTag();
          operation_mode = 0;
          goto end_exit;
        }
      }//end of for(scan)loop()
      //if no match found
      if (history == 0)
      {
        lcd_print(0, 1, "DID NOT MATCHED!");
        beep();
        dly(2000);
        lcd_print(0, 1, "                ");
        dly(200); lcd.clear(); dly(100);
      }
    }
    exit_from_fnc();
    rfid_read_ok = 0;//reset read ok mask
    operation_mode = 0;
    clean_newTag();
    lcd_print(18, 0, "  ");
  }//rfid_read_ok == 1
  exit_from_fnc();
end_exit:;
}

void enable_user_recharge_data_posting()
{
  writeEEPROM(eeprom1, 96, 1);//activate posting
}

void user_recharge_data_posting_done()
{
  writeEEPROM(eeprom1, 96, 0);//posting was successfull!
}

void write_recharging_id_no(unsigned int id_no)
{
  writeEEPROM(eeprom1, 12, id_no / 1000 % 10);
  writeEEPROM(eeprom1, 13, id_no / 100 % 10 );
  writeEEPROM(eeprom1, 14, id_no / 10 % 10);
  writeEEPROM(eeprom1, 15, id_no / 1 % 10);
}

int read_recharging_id_no()
{
  unsigned int editing_id_no;
  editing_id_no = readEEPROM(eeprom1, 12) * 1000 + readEEPROM(eeprom1, 13) * 100 + readEEPROM(eeprom1, 14) * 10 + readEEPROM(eeprom1, 15);
  return editing_id_no;
}

void write_today_recharge_amount(unsigned int today_recharge_amount)
{
  long rcg_amount = 0;
  unsigned int rcg_amount_digits[] = {0, 0, 0, 0, 0, 0};
  rcg_amount = (long)(read_today_recharge_amount() + today_recharge_amount);

  long value3 = rcg_amount;
  for (int k = 5; k > 0; k--)
  {
    if (value3 >= 0)rcg_amount_digits[k] = value3 % 10;
    else rcg_amount_digits[k] = 0;
    value3 /= 10;
  }

  writeEEPROM(eeprom1, 109, rcg_amount_digits[0]);
  writeEEPROM(eeprom1, 110, rcg_amount_digits[1] );
  writeEEPROM(eeprom1, 111, rcg_amount_digits[2]);
  writeEEPROM(eeprom1, 112, rcg_amount_digits[3]);
  writeEEPROM(eeprom1, 113, rcg_amount_digits[4]);
  writeEEPROM(eeprom1, 114, rcg_amount_digits[5]);

  //  Serial.println();
  //  Serial.print("today_recharge_amount =");
  //  Serial.print(read_today_recharge_amount());
  //  Serial.println();
}

void clear_today_recharge_amount()
{
  writeEEPROM(eeprom1, 109, 0);
  writeEEPROM(eeprom1, 110, 0 );
  writeEEPROM(eeprom1, 111, 0);
  writeEEPROM(eeprom1, 112, 0);
  writeEEPROM(eeprom1, 113, 0);
  writeEEPROM(eeprom1, 114, 0);
}

unsigned int read_today_recharge_amount()
{
  unsigned int today_recharge_amount;
  today_recharge_amount = readEEPROM(eeprom1, 109) * 100000
                          + readEEPROM(eeprom1, 110) * 10000
                          + readEEPROM(eeprom1, 111) * 1000
                          + readEEPROM(eeprom1, 112) * 100
                          + readEEPROM(eeprom1, 113) * 10
                          + readEEPROM(eeprom1, 114);
  return today_recharge_amount;
}
/******************************************************************************/

unsigned int find_last_recharge_amount(unsigned int id_serial_no)
{
  int n = 0;
  long last_recharge_amount = 0;
  int last_recharge[] = {0, 0, 0, 0, 0, 0};
  unsigned int adrs_last_recharge = last_recharge_amount_address_initial + id_serial_no * 6;
  for (unsigned int k = adrs_last_recharge; k < adrs_last_recharge + 6; k++)//store saved tag into oldTag
  {
    last_recharge[n] = readEEPROM(eeprom1, k);//read old tag
    n++; dly(1);
  }
  last_recharge_amount = (long)(last_recharge[0] * 100000
                                +  last_recharge[1] * 10000
                                +  last_recharge[2] * 1000
                                +  last_recharge[3] * 100
                                +  last_recharge[4] * 10
                                +  last_recharge[5]);
  return (long)last_recharge_amount;
}

long find_total_recharge_amount(unsigned int id_serial_no)
{
  int n = 0;
  unsigned long total_recharge_amount = 0;
  long total_recharge[] = {0, 0, 0, 0, 0, 0};
  unsigned int adrs_total_recharge = total_recharge_amount_address_initial + id_serial_no * 6;
  for (unsigned int k = adrs_total_recharge; k < adrs_total_recharge + 6; k++)//store saved tag into oldTag
  {
    total_recharge[n] = readEEPROM(eeprom1, k);//read old tag
    n++; dly(1);
  }
  total_recharge_amount = (long)(total_recharge[0] * 100000
                                 +  total_recharge[1] * 10000
                                 +  total_recharge[2] * 1000
                                 +  total_recharge[3] * 100
                                 +  total_recharge[4] * 10
                                 +  total_recharge[5]);
  return (long)total_recharge_amount;
}